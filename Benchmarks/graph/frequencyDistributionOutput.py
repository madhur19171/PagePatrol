import matplotlib.pyplot as plt
from collections import Counter

def parse_c_program_output(output_file):
    """
    Parses the output file generated by the C program and counts node visits.
    
    Parameters:
        output_file (str): Path to the file containing the C program's output.
    
    Returns:
        Counter: A Counter object mapping nodes to the number of visits.
    """
    visit_counts = {}

    try:
        with open(output_file, 'r') as file:
            for line in file:
                # Look for lines with "Step X: Node Y"
                if "Node" in line:
                    parts = line.strip().split(" ")
                    node_index = parts.index("Node") + 1
                    node = int(parts[node_index])
                    
                    if node in visit_counts:
                        visit_counts[node] += 1
                    else:
                        visit_counts[node] = 0

    except FileNotFoundError:
        print(f"Error: File '{output_file}' not found.")
        exit(1)
    except Exception as e:
        print(f"An error occurred while parsing the file: {e}")
        exit(1)

    return visit_counts

def plot_sorted_visit_frequencies(visit_counts):
    """
    Plots the frequency of visits for each node, sorted in descending order.
    
    Parameters:
        visit_counts (Counter): A Counter object mapping nodes to the number of visits.
    """
    # Sort nodes by visit frequency in descending order

    plt.figure(figsize=(10, 6))
    plt.bar(list(range(len(visit_counts))), sorted(visit_counts.values(), reverse=True), color='blue', edgecolor='black', alpha=0.7)
    plt.title("Node Visit Frequencies (Sorted by Most Visited)")
    plt.xlabel("Node (Sorted by Frequency)")
    plt.ylabel("Visit Frequency")
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.show()

    print("node with highest visits", max(visit_counts, key=visit_counts.get))
    print("node with lowest visits", min(visit_counts, key=visit_counts.get))


# Example usage
if __name__ == "__main__":
    output_file = "output.txt"
    
    visit_counts = parse_c_program_output(output_file)
    plot_sorted_visit_frequencies(visit_counts)
